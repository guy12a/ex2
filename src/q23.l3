(define make-error
  (lambda (msg)
    (cons 'error msg)))

(define is-error?
  (lambda (x)
    (and (pair? x)
         (eq? (car x) 'error))))

(define bind
  (lambda (val f)
    (if (is-error? val)
        val
        (f val))))

(define dict
  (lambda (pairs)
    pairs)) 

(define dict?
  (lambda (d)
    (if (not (pair? d))
        #f
        (if (eq? d '())
            #t
            (if (and (pair? (car d))
                     (symbol? (car (car d))))
                ((lambda (rest) (dict? rest)) (cdr d))
                #f)))))

(define get
  (lambda (d k)
    (if (or (not (pair? d)) (eq? d '()))
        (make-error "Key not found")
        (if (and (pair? (car d)) (eq? (car (car d)) k))
            (cdr (car d))
            ((lambda (rest) (get rest k)) (cdr d))))))
