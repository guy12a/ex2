(define make-error
  (lambda (msg)
    (cons 'error msg)))

(define is-error?
  (lambda (x)
    (and (pair? x)
         (eq? (car x) 'error))))

(define bind
  (lambda (val f)
    (if (is-error? val)
        val
        (f val))))

(define dict
  (lambda (pairs)
    pairs)) 

(define dict?
  (lambda (lst)
    ((lambda (f)
       (f f lst))
     (lambda (f pairs)
       (if (eq? pairs '())
           #t
           (if (and (pair? (car pairs))
                    (symbol? (car (car pairs))))
               (f f (cdr pairs))
               #f))))))

